{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar React = require(\"react\");\n\nvar gridHeader_1 = require(\"./gridHeader\");\n\nvar gridBody_1 = require(\"./gridBody\");\n\nvar gridFooter_1 = require(\"./gridFooter\");\n\nvar polyfills_1 = require(\"./polyfills\");\n\npolyfills_1.polyfills();\n\nvar JsonTable =\n/** @class */\nfunction (_super) {\n  __extends(JsonTable, _super);\n\n  function JsonTable() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.defaultSettings = {\n      header: true,\n      noRowsMessage: 'No items',\n      classPrefix: 'json'\n    };\n    _this.headerGrouping = false;\n    return _this;\n  }\n\n  JsonTable.prototype.render = function () {\n    this.createSettings();\n    this.columns = this.createColumns();\n    this.className = this.props.className || this.settings.classPrefix + \"Table\";\n    var header = this.settings.header ? React.createElement(gridHeader_1.GridHeader, {\n      theadClassName: this.props.theadClassName,\n      key: 'jt-header',\n      settings: this.settings,\n      columns: this.columns,\n      onClickHeader: this.props.onClickHeader,\n      grouping: this.headerGrouping\n    }) : null;\n    var caption = this.props.caption ? React.createElement(\"caption\", null, this.props.caption) : null;\n    var table = React.createElement(\"div\", null, React.createElement(\"div\", {\n      style: {\n        position: \"relative\",\n        overflow: \"hidden\"\n      }\n    }, React.createElement(\"table\", {\n      className: this.className,\n      key: 'jt-table'\n    }, caption, header, React.createElement(gridBody_1.GridBody, {\n      key: 'jt-body',\n      settings: this.settings,\n      columns: this.columns,\n      rows: this.props.rows,\n      onClickRow: this.props.onClickRow,\n      onClickCell: this.props.onClickCell\n    }), React.createElement(gridFooter_1.GridFooter, {\n      key: 'jt-footer'\n    }))));\n    return this.settings.freezeHeader ? React.createElement(\"div\", {\n      className: \"scrollingtable\"\n    }, React.createElement(\"div\", null, React.createElement(\"div\", null, table))) : table;\n  };\n\n  JsonTable.prototype.createSettings = function () {\n    if (this.props.settings) {\n      this.settings = this.props.settings;\n    } else {\n      this.settings = this.defaultSettings;\n    }\n\n    if (this.settings.header == null) this.settings.header = true;\n    if (this.settings.noRowsMessage == null) this.settings.noRowsMessage = this.defaultSettings.noRowsMessage;\n    if (this.settings.classPrefix == null) this.settings.classPrefix = this.defaultSettings.classPrefix;\n  };\n\n  JsonTable.prototype.createColumns = function () {\n    var _this = this;\n\n    if (!this.props.rows || this.props.rows.length === 0) {\n      return [];\n    }\n\n    var columns;\n\n    if (!this.props.columns) {\n      columns = Object.keys(this.props.rows[0]).map(function (key) {\n        return {\n          key: key,\n          label: key,\n          cell: _this.settings.cellRenderer || key\n        };\n      });\n    } else {\n      columns = this.props.columns.map(function (column) {\n        if (typeof column == 'string') {\n          return {\n            key: column,\n            label: column,\n            cell: _this.settings.cellRenderer || column\n          };\n        }\n\n        if (typeof column == 'object') {\n          var key = column.key || column.label;\n          if (column.group) _this.headerGrouping = true;\n          return {\n            key: key,\n            label: column.label || key,\n            cell: _this.settings.cellRenderer || column.cell || key,\n            objectDisplayStyle: column.objectDisplayStyle,\n            group: column.group\n          };\n        }\n      });\n    }\n\n    if (this.props.excludeColumns && this.props.excludeColumns.length !== 0) {\n      var toDelete_1 = [];\n      this.props.excludeColumns.forEach(function (key) {\n        toDelete_1.push(columns.findIndex(function (column) {\n          return column.key === key;\n        }));\n      });\n      toDelete_1.forEach(function (index) {\n        if (index !== -1) columns.splice(index, 1);\n      });\n    }\n\n    var copyObject = function copyObject(index, columnDefinition) {\n      if (index !== -1) {\n        Object.keys(columnDefinition).forEach(function (key) {\n          columns[index][key] = columnDefinition[key];\n        });\n        return true;\n      }\n\n      return false;\n    };\n\n    if (this.props.columnDefinitions && this.props.columnDefinitions.length > 0) {\n      this.props.columnDefinitions.forEach(function (def) {\n        var index = columns.findIndex(function (column) {\n          return column.key === def.key;\n        });\n\n        if (!copyObject(index, def)) {\n          var dotIndex_1 = def.key.indexOf('.');\n\n          if (dotIndex_1 !== -1) {\n            index = columns.findIndex(function (column) {\n              return column.key === def.key.substring(0, dotIndex_1);\n            });\n\n            if (copyObject(index, def)) {\n              columns[index].cell = _this.settings.cellRenderer || def.cell || def.key;\n            } else {\n              index = columns.findIndex(function (column) {\n                return column.key.indexOf(def.key.substring(0, dotIndex_1 + 1)) !== -1;\n              });\n\n              if (index !== -1) {\n                var newIndex = index + 1;\n                columns.splice(newIndex, 0, def);\n                copyObject(newIndex, def);\n                columns[newIndex].cell = _this.settings.cellRenderer || def.cell || def.key;\n              }\n            }\n          }\n        }\n\n        if (def.group) _this.headerGrouping = true;\n      });\n    }\n\n    if (this.headerGrouping) {\n      var group_1;\n      var colSpans_1 = new Map();\n      var colSpan_1 = 1;\n      columns.forEach(function (column) {\n        if (column.group) {\n          if (column.group === group_1) {\n            colSpans_1.set(column.group, ++colSpan_1);\n          } else {\n            group_1 = column.group;\n            column.groupIndex = 0;\n            colSpan_1 = 1;\n          }\n        }\n      });\n      Array.from(colSpans_1.keys()).forEach(function (group) {\n        var index = columns.findIndex(function (column) {\n          return column.group === group && column.groupIndex === 0;\n        });\n        columns[index].colSpan = colSpans_1.get(group);\n      });\n    }\n\n    return columns;\n  };\n\n  return JsonTable;\n}(React.Component);\n\nexports.JsonTable = JsonTable;\nmodule.exports = JsonTable;","map":null,"metadata":{},"sourceType":"script"}
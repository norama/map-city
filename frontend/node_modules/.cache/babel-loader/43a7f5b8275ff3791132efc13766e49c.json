{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nrequire('babel-polyfill');\n\nrequire('./react-leaflet-search.css');\n\nvar _leaflet = require('leaflet');\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _reactLeaflet = require('react-leaflet');\n\nvar _InputBox = require('./InputBox');\n\nvar _InputBox2 = _interopRequireDefault(_InputBox);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar ReactLeafletSearch = function (_MapControl) {\n  _inherits(ReactLeafletSearch, _MapControl);\n\n  function ReactLeafletSearch(props, context) {\n    _classCallCheck(this, ReactLeafletSearch);\n\n    var _this = _possibleConstructorReturn(this, _MapControl.call(this, props));\n\n    _this.div = _leaflet.DomUtil.create('div', 'leaflet-search-wrap');\n    L.DomEvent.disableClickPropagation(_this.div);\n    L.DomEvent.disableScrollPropagation(_this.div);\n    _this.state = {\n      search: false,\n      info: false\n    };\n    _this.markerIcon = (0, _leaflet.icon)({\n      iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.3.1/images/marker-icon.png',\n      iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.3.1/images/marker-icon-2x.png',\n      shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.3.1/images/marker-shadow.png',\n      iconSize: [25, 41],\n      iconAnchor: [12, 41],\n      popupAnchor: [1, -34],\n      tooltipAnchor: [16, -28],\n      shadowSize: [41, 41]\n    });\n    _this.SearchInfo = null; // searched lat,lng or response from provider\n\n    _this.map = context.map || props.leaflet.map;\n    return _this;\n  }\n\n  ReactLeafletSearch.prototype.createLeafletElement = function createLeafletElement(props) {\n    var _this2 = this;\n\n    var ReactLeafletSearch = _leaflet.Control.extend({\n      onAdd: function onAdd(map) {\n        return _this2.div;\n      },\n      onRemove: function onRemove(map) {}\n    });\n\n    return new ReactLeafletSearch(props);\n  };\n\n  ReactLeafletSearch.prototype.latLngHandler = function latLngHandler(latLng, info) {\n    this.SearchInfo = {\n      info: info,\n      latLng: latLng\n    };\n\n    var popUpStructure = _react2.default.createElement('div', null, _react2.default.createElement('p', null, Array.isArray(info) ? info.toString() : info), _react2.default.createElement('div', {\n      className: 'leaflet-search-popup'\n    }), _react2.default.createElement('div', null, 'latitude: ' + latLng[0]), _react2.default.createElement('div', null, 'longitude: ' + latLng[1]));\n\n    this.goToLatLng(latLng, popUpStructure);\n  };\n\n  ReactLeafletSearch.prototype.removeMarkerHandler = function removeMarkerHandler() {\n    this.setState({\n      search: false\n    });\n  };\n\n  ReactLeafletSearch.prototype.goToLatLng = function goToLatLng(latLng, info) {\n    var _this3 = this;\n\n    this.setState({\n      search: latLng,\n      info: info\n    }, function () {\n      _this3.flyTo();\n    });\n  };\n\n  ReactLeafletSearch.prototype.flyTo = function flyTo() {\n    if (this.props.mapStateModifier === 'flyTo') {\n      this.map.flyTo([].concat(this.state.search), this.props.zoom, this.props.zoomPanOptions);\n    } else if (this.props.mapStateModifier === 'setView') {\n      this.map.setView([].concat(this.state.search), this.props.zoom, this.props.zoomPanOptions);\n    } else {\n      typeof this.props.mapStateModifier === 'function' && this.props.mapStateModifier([].concat(this.state.search));\n    }\n  };\n\n  ReactLeafletSearch.prototype.componentDidMount = function componentDidMount() {\n    _MapControl.prototype.componentDidMount.call(this);\n\n    _reactDom2.default.render(_react2.default.createElement(_InputBox2.default, _extends({}, this.props, {\n      map: this.map,\n      latLngHandler: this.latLngHandler.bind(this),\n      removeMarker: this.removeMarkerHandler.bind(this)\n    })), this.div);\n  };\n\n  ReactLeafletSearch.prototype.componentDidUpdate = function componentDidUpdate() {\n    this.markerRef && this.markerRef.leafletElement.openPopup();\n  };\n\n  ReactLeafletSearch.prototype.defaultPopUp = function defaultPopUp() {\n    return _react2.default.createElement(_reactLeaflet.Popup, null, _react2.default.createElement('span', null, this.state.info));\n  };\n\n  ReactLeafletSearch.prototype.render = function render() {\n    var _this4 = this;\n\n    this.markerRef = false;\n\n    var _ = this;\n\n    return this.state.search && this.props.showMarker ? _react2.default.createElement(_reactLeaflet.Marker, {\n      ref: function ref(_ref) {\n        return _this4.markerRef = _ref;\n      },\n      icon: this.props.markerIcon || this.markerIcon,\n      key: 'marker-search-' + this.state.search.toString(),\n      position: [].concat(this.state.search)\n    }, this.props.showPopup && (this.props.popUp ? this.props.popUp(this.SearchInfo) : this.defaultPopUp())) : null;\n  };\n\n  return ReactLeafletSearch;\n}(_reactLeaflet.MapControl);\n\nexports.default = ReactLeafletSearch;\nReactLeafletSearch.propTypes = {\n  position: _propTypes2.default.string.isRequired,\n  providerKey: _propTypes2.default.string,\n  inputPlaceholder: _propTypes2.default.string,\n  showMarker: _propTypes2.default.bool,\n  showPopup: _propTypes2.default.bool,\n  popUp: _propTypes2.default.func,\n  zoom: _propTypes2.default.number,\n  search: _propTypes2.default.arrayOf(_propTypes2.default.number),\n  closeResultsOnClick: _propTypes2.default.bool,\n  openSearchOnLoad: _propTypes2.default.bool,\n  searchBounds: _propTypes2.default.array,\n  provider: _propTypes2.default.string,\n  providerOptions: _propTypes2.default.object,\n  zoomPanOptions: _propTypes2.default.object,\n  mapStateModifier: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string])\n};\nReactLeafletSearch.defaultProps = {\n  inputPlaceholder: \"Search Lat,Lng\",\n  showMarker: true,\n  showPopup: true,\n  zoom: 10,\n  search: [],\n  closeResultsOnClick: false,\n  openSearchOnLoad: false,\n  searchBounds: [],\n  provider: 'OpenStreetMap',\n  providerOptions: {},\n  mapStateModifier: 'flyTo',\n  zoomPanOptions: {\n    animate: true,\n    duration: 0.25,\n    easeLinearity: 0.25,\n    noMoveStart: false\n  }\n};","map":null,"metadata":{},"sourceType":"script"}
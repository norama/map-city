{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar React = require(\"react\");\n\nvar GridHeaderRowCell =\n/** @class */\nfunction (_super) {\n  __extends(GridHeaderRowCell, _super);\n\n  function GridHeaderRowCell() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  GridHeaderRowCell.prototype.render = function () {\n    var headerClass = this.props.settings.headerClass; //let label: string;\n\n    var rowSpan = null;\n    var colSpan = 1;\n    var skip = false;\n\n    if (this.props.groupCell) {\n      if (this.props.column.group) {\n        if (this.props.column.groupIndex === 0) {\n          this.header = this.props.column.group;\n          colSpan = this.props.column.colSpan;\n        } else {\n          skip = true;\n        }\n      } else {\n        this.header = this.props.column.label;\n        rowSpan = 2;\n      }\n    } else {\n      if (this.props.grouping) {\n        if (this.props.column.group) {\n          this.header = this.props.column.label;\n        } else {\n          skip = true;\n        }\n      } else {\n        this.header = this.props.column.label;\n      }\n    } //this.key = (this.props.column.group && this.header === this.props.column.group) ? this.header.replace(/\\W+/g, '') : this.props.column.key;\n\n\n    this.key = this.props.column.group && this.header === this.props.column.group ? this.header : this.props.column.key;\n    var className = this.props.settings.classPrefix + \"Column \" + this.props.settings.classPrefix + \"Column_\" + this.key.replace(/\\W+/g, '');\n\n    if (headerClass) {\n      className = headerClass(className, this.key);\n    }\n\n    var content = this.props.settings.freezeHeader ? React.createElement(\"div\", null, React.createElement(\"div\", null, this.header), React.createElement(\"div\", null, this.header)) : this.header;\n    return skip ? null : this.createTh(className, rowSpan, colSpan, content);\n  };\n\n  GridHeaderRowCell.prototype.createTh = function (className, rowSpan, colSpan, content) {\n    return React.createElement(\"th\", {\n      className: className,\n      onClick: this.onClick.bind(this, this.key),\n      \"data-key\": this.key,\n      rowSpan: rowSpan,\n      colSpan: colSpan\n    }, content);\n  };\n\n  GridHeaderRowCell.prototype.onClick = function (key, e) {\n    if (this.props.onClickHeader) {\n      this.props.onClickHeader(e, key);\n    }\n  };\n\n  return GridHeaderRowCell;\n}(React.Component);\n\nexports.GridHeaderRowCell = GridHeaderRowCell;","map":null,"metadata":{},"sourceType":"script"}
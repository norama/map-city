{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:\\\\work\\\\inventi\\\\map-city\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nexports.__esModule = true;\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var gen = fn.apply(this, arguments);\n    return new Promise(function (resolve, reject) {\n      function step(key, arg) {\n        try {\n          var info = gen[key](arg);\n          var value = info.value;\n        } catch (error) {\n          reject(error);\n          return;\n        }\n\n        if (info.done) {\n          resolve(value);\n        } else {\n          return Promise.resolve(value).then(function (value) {\n            step(\"next\", value);\n          }, function (err) {\n            step(\"throw\", err);\n          });\n        }\n      }\n\n      return step(\"next\");\n    });\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar BingMap = function () {\n  function BingMap() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      providerKey: null,\n      searchBounds: []\n    };\n\n    _classCallCheck(this, BingMap);\n\n    var providerKey = options.providerKey,\n        searchBounds = options.searchBounds;\n    this.key = providerKey; //Bounds are expected to be a nested array of [[sw_lat, sw_lng],[ne_lat, ne_lng]].\n    // We convert them into a string of 'x1,y1,x2,y2'\n\n    var boundsUrlComponent = \"\";\n\n    if (searchBounds.length) {\n      var _ref;\n\n      this.bounds = (_ref = []).concat.apply(_ref, [[]].concat(searchBounds)).join(\",\");\n      boundsUrlComponent = \"&umv=\" + this.bounds;\n    }\n\n    this.url = \"https://dev.virtualearth.net/REST/v1/Locations?output=json\" + boundsUrlComponent + \"&key=\" + this.key + \"&q=\";\n  }\n\n  BingMap.prototype.search = function () {\n    var _ref2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(query) {\n      var response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(typeof this.key === 'undefined')) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.abrupt(\"return\", {\n                error: 'BingMap requires an api key'\n              });\n\n            case 2:\n              _context.next = 4;\n              return fetch(this.url + query).then(function (res) {\n                return res.json();\n              });\n\n            case 4:\n              response = _context.sent;\n              return _context.abrupt(\"return\", this.formatResponse(response));\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function search(_x2) {\n      return _ref2.apply(this, arguments);\n    }\n\n    return search;\n  }();\n\n  BingMap.prototype.formatResponse = function formatResponse(response) {\n    // console.log(response)\n    var resources = response.resourceSets[0].resources;\n    var count = response.resourceSets[0].estimatedTotal; // console.log(resources)\n\n    var info = count > 0 ? resources.map(function (e) {\n      return {\n        bounds: e.bbox.map(function (bound) {\n          return Number(bound);\n        }),\n        latitude: Number(e.point.coordinates[0]),\n        longitude: Number(e.point.coordinates[1]),\n        name: e.name\n      };\n    }) : 'Not Found';\n    return {\n      info: info,\n      raw: response\n    };\n  };\n\n  return BingMap;\n}();\n\nexports.BingMap = BingMap;","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar React = require(\"react\");\n\nvar gridRowCell_1 = require(\"./gridRowCell\");\n\nvar utils_1 = require(\"./utils\");\n\nvar GridRow =\n/** @class */\nfunction (_super) {\n  __extends(GridRow, _super);\n\n  function GridRow() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  GridRow.prototype.render = function () {\n    var _this = this;\n\n    var rowClass = this.props.settings.rowClass;\n    var className = this.props.settings.classPrefix + \"Row \" + this.props.settings.classPrefix + (this.props.index % 2 ? 'Odd' : 'Even');\n\n    if (rowClass) {\n      className = rowClass(className, this.props.row);\n    }\n\n    return React.createElement(\"tr\", {\n      className: className,\n      onClick: this.onClick.bind(this, this.props.row)\n    }, this.props.columns.map(function (column, index) {\n      var item;\n\n      if (typeof column.cell === 'function') {\n        item = column.cell(_this.props.row, column.key);\n      } else if (column.cell.indexOf('.') !== -1) {\n        item = utils_1.Utils.getObjectByKey(_this.props.row, column.cell);\n      } else {\n        item = _this.props.row[column.cell];\n      }\n\n      if (typeof item === 'object' && typeof column.cell !== 'function') {\n        var objectDisplayStyle = column.objectDisplayStyle || 'string';\n        var preClassName = _this.props.settings.classPrefix + \"CellPre \" + _this.props.settings.classPrefix + \"CellPre_\" + column.key;\n\n        switch (objectDisplayStyle) {\n          case 'string':\n            item = utils_1.Utils.flattenToString(item);\n            break;\n\n          case 'json':\n            item = JSON.stringify(item);\n            break;\n\n          case 'jsonSpaced':\n            item = React.createElement(\"pre\", {\n              className: preClassName\n            }, JSON.stringify(item, null, 2));\n            break;\n\n          case 'flatJson':\n            item = JSON.stringify(utils_1.Utils.flatten(item));\n            break;\n\n          case 'flatJsonSpaced':\n            item = React.createElement(\"pre\", {\n              className: preClassName\n            }, JSON.stringify(utils_1.Utils.flatten(item), null, 2));\n            break;\n\n          default:\n            item = utils_1.Utils.flattenToString(item);\n        }\n      }\n\n      var key = \"jt-body-td-\" + index;\n      return React.createElement(gridRowCell_1.GridRowCell, {\n        settings: _this.props.settings,\n        onClickCell: _this.props.onClickCell,\n        item: item,\n        row: _this.props.row,\n        column: column,\n        key: key\n      });\n    }));\n  };\n\n  GridRow.prototype.onClick = function (item, e) {\n    if (this.props.onClickRow) {\n      this.props.onClickRow(e, item);\n    }\n  };\n\n  return GridRow;\n}(React.Component);\n\nexports.GridRow = GridRow;","map":null,"metadata":{},"sourceType":"script"}